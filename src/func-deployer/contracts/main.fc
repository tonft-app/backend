#pragma version >=0.2.0;

#include "imports/stdlib.fc";
#include "imports/utils.fc";

;; NFT marketplace smart contract v2
;; Extends wallet v3r2 & adds ability to deploy sales

;;
;; storage scheme
;;
;; storage#_ seqno:uint32 subwallet:uint32 public_key:uint25
;;           = Storage;
;;
_ load_data() {
    var ds = get_data().begin_parse();
    return (
        ds~load_msg_addr()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    var (owner_address) = load_data();

    int op = in_msg_body~load_uint(32);

    if (op == 1) { ;; deploy new signed sale
        (cell state_init, cell body) = (in_msg_body~load_ref(), in_msg_body~load_ref());

        int state_init_hash = cell_hash(state_init);
        slice dest_address = begin_cell().store_int(0, 8).store_uint(state_init_hash, 256).end_cell().begin_parse();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_uint(4, 3).store_slice(dest_address)
            .store_grams(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(body);

        send_raw_message(msg.end_cell(), 64); ;; carry remaining value of message
        return ();
    }

    if (op == 2) { ;; withdraw all balance
      throw_unless(777, equal_slices(sender_address, owner_address));
      send_grams(owner_address, 0);
    }

    return ();
}